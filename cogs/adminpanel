import disnake
from disnake.ext import commands
from database.Database import UsersDataBase
from cogs.mute import Timeout

db = UsersDataBase()


class RecruitementModal(disnake.ui.Modal):
    def __init__(self, arg):
        self.arg = arg

        components = [
            disnake.ui.TextInput(label="–í—Ä–µ–º—è", placeholder="–í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö...", custom_id="time"),
            disnake.ui.TextInput(label="–ü—Ä–∏—á–∏–Ω–∞", placeholder="–ü—Ä–∏—á–∏–Ω–∞", custom_id="reason")
        ]

        title = self.arg

        super().__init__(title=title, components=components, custom_id="recruitementModal")

    async def callback(self, interaction: disnake.ModalInteraction) -> None:
        time = interaction.text_values["–í—Ä–µ–º—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)"]
        reason = interaction.text_values["–ü—Ä–∏—á–∏–Ω–∞"]
        userName = interaction.text_value[self.title]

        embed = disnake.Embed(color=0x2F3136, title="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        embed.description = f"{interaction.author.mention}, "
        embed.set_thumbnail(url=interaction.author.display_avatar.url)
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        channel = interaction.guild.get_channel(...) 
        await channel.send(f"–ó–∞—è–≤–∫–∞ –Ω–∞ {self.arg} –æ—Ç {name} {interaction.author.mention} ({age} –ª–µ—Ç)")


class RecruitementSelect(disnake.ui.Select):
    def __init__(self):
        options = [
            disnake.SelectOption(label="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value="moderator", description="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞"),
            disnake.SelectOption(label="–í–µ–¥—É—â–∏–π", value="eventsmod", description="–í–µ–¥—É—â–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"),
        ]

        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å", options=options, min_values=0, max_values=1, custom_id="recruitement"
        )

    async def callback(self, interaction: disnake.MessageInteraction):
        if not interaction.values:
            await interaction.response.defer()
        else:
            await interaction.response.send_modal(RecruitementModal(interaction.values[0]))


class Recruitement(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistent_views_added = False

    @commands.command()
    async def recruit(self, ctx):
        view = disnake.ui.View()
        view.add_item(RecruitementSelect())

        await ctx.send('–í—ã–±–µ—Ä–∏ –∂–µ–ª–∞–µ–º—É—é —Ä–æ–ª—å', view=view)

class ButtonView(disnake.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @disnake.ui.button(label="üéÆ", style=disnake.ButtonStyle.grey, custom_id="btMute")
    async def btMute(self, button: disnake.ui.Button, interaction, member: disnake.Member):
        await Timeout.timeout()
        await interaction.response.defer()
     

class AdminPanel(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.persistent_views_added = False

    @commands.slash_command(description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    @commands.has_permissions(administrator=True, moderate_members=True)
    async def admin(self, interaction: disnake.ApplicationCommandInteraction, member: disnake.Member):
        view = ButtonView()

        embed = disnake.Embed(color=0x2F3136)
        embed.set_author(name="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        else:
            embed.set_thumbnail(url=member.default_avatar.url)
        embed.description = f"–í—ã –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {member.mention}."
        embed.set_image(url="https://i.imgur.com/QzB7q9J.png")
        await interaction.send(embed=embed, view=view, ephemeral=True)
        
        
def setup(bot):
    bot.add_cog(AdminPanel(bot))